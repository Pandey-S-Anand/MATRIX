/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    private static enum Direction {
        LEFT_TO_RIGHT,
        TOP_TO_BOTTOM,
        RIGHT_TO_LEFT,
        BOTTOM_TO_TOP
    }

    // The ListNode representing the head of the linked list
    private ListNode currentNode;

    public int[][] spiralMatrix(int m, int n, ListNode head) {
        int[][] matrix = new int[m][n];
        // Define matrix boundaries
        int top = 0, bottom = m - 1;
        int left = 0, right = n - 1;

        // Start direction is left to right
        Direction direction = Direction.LEFT_TO_RIGHT;
        // Set the current node to the head of the linked list
        currentNode = head;

        // Continue until all rows and columns are covered
        while (top <= bottom && left <= right) {
            switch (direction) {
                case LEFT_TO_RIGHT:
                    // Traverse from left to right on the top row
                    for (int i = left; i <= right; i++) {
                        matrix[top][i] = getNextValue(); // Get the next value from the linked list
                    }
                    // Move the top boundary one row down
                    top++;
                    direction = Direction.TOP_TO_BOTTOM;
                    break;

                case TOP_TO_BOTTOM:
                    // Traverse from top to bottom on the right column
                    for (int i = top; i <= bottom; i++) {
                        matrix[i][right] = getNextValue(); // Get the next value from the linked list
                    }
                    // Move the right boundary one column left
                    right--;
                    direction = Direction.RIGHT_TO_LEFT;
                    break;

                case RIGHT_TO_LEFT:
                    // Traverse from right to left on the bottom row
                    for (int i = right; i >= left; i--) {
                        matrix[bottom][i] = getNextValue(); // Get the next value from the linked list
                    }
                    // Move the bottom boundary one row up
                    bottom--;
                    direction = Direction.BOTTOM_TO_TOP;
                    break;

                case BOTTOM_TO_TOP:
                    // Traverse from bottom to top on the left column
                    for (int i = bottom; i >= top; i--) {
                        matrix[i][left] = getNextValue(); // Get the next value from the linked list
                    }
                    // Move the left boundary one column right
                    left++;
                    direction = Direction.LEFT_TO_RIGHT;
                    break;
            }
        }

        return matrix;
    }

    private int getNextValue() {
        if (currentNode == null) {
            return -1; // Return -1 if there are no more values in the singly linked list
        }

        // Get the value from the current node
        int value = currentNode.val;

        // Move to the next node
        currentNode = currentNode.next;

        // Return the value
        return value;
    }
}
