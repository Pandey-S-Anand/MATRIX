class Solution {
    // Enum to define the four possible traversal directions in spiral order
    private static enum Direction {
        LEFT_TO_RIGHT,
        TOP_TO_BOTTOM,
        RIGHT_TO_LEFT,
        BOTTOM_TO_TOP
    }

    /*
     * Generic matrix example to explain normal flow:
     * [ 1,  2,  3,  4,  5,  6,  7 ],
     * [ 8,  9, 10, 11, 12, 13, 14 ],
     * [15, 16, 17, 18, 19, 20, 21 ],
     * [22, 23, 24, 25, 26, 27, 28 ],
     * [29, 30, 31, 32, 33, 34, 35 ],
     * [36, 37, 38, 39, 40, 41, 42 ]
     *
     * Corner Case #1 (single column):
     * [7],
     * [9],
     * [6]
     *
     * Corner Case #2 (single row):
     * [7, 9, 6]
     */

    public List<Integer> spiralOrder(int[][] mat) {
        // Define matrix boundaries
        int top = 0, bottom = mat.length - 1;
        int left = 0, right = mat[0].length - 1;

        // Start direction is left to right
        Direction direction = Direction.LEFT_TO_RIGHT;

        //List to store the spiral order
        List<Integer> spiralTraversal = new ArrayList<>();

        // Continue until all rows and columns are covered
        while (top <= bottom && left <= right) {
            switch (direction) {
                case LEFT_TO_RIGHT:
                    // Traverse from left to right on the top row
                    for (int i = left; i <= right; i++) {
                        spiralTraversal.add(mat[top][i]);
                    }
                    // Move the top boundary one row down
                    top++;
                    direction = Direction.TOP_TO_BOTTOM;
                    break;

                case TOP_TO_BOTTOM:
                    // Traverse from top to bottom on the right column
                    for (int i = top; i <= bottom; i++) {
                        spiralTraversal.add(mat[i][right]);
                    }
                    // Move the right boundary one column left
                    right--;
                    direction = Direction.RIGHT_TO_LEFT;
                    break;

                case RIGHT_TO_LEFT:
                    // Traverse from right to left on the bottom row
                    for (int i = right; i >= left; i--) {
                        spiralTraversal.add(mat[bottom][i]);
                    }
                    // Move the bottom boundary one row up
                    bottom--;
                    direction = Direction.BOTTOM_TO_TOP;
                    break;

                case BOTTOM_TO_TOP:
                    // Traverse from bottom to top on the left column
                    for (int i = bottom; i >= top; i--) {
                        spiralTraversal.add(mat[i][left]);
                    }
                    // Move the left boundary one column right
                    left++;
                    direction = Direction.LEFT_TO_RIGHT;
                    break;
            }
        }

        return spiralTraversal;
    }
}
