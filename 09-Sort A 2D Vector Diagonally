//Buteforce approach

class Solution {
    void diagonalSort(int matrix[][], int n, int m) {
        // List for storing diagonal elements during processing.
        List<Integer> diagonal = new ArrayList<>();

        // Process lower-left diagonals (starting at row 1 in the first column, excluding the major diagonal)
        for (int i = 1; i < n; i++) {
            int row = i, col = 0;

            // Collect all the elements in the current diagonal.
            while (row < n && col < m) {
                diagonal.add(matrix[row][col]);
                row++;
                col++;
            }

            // Sort the collected diagonal elements in ascending order.
            Collections.sort(diagonal);

            // Reset row and col to starting position for this diagonal.
            row = i;
            col = 0;
            int idx = 0; // Index to iterate through the sorted list.
            // Reinsert the sorted elements back into the matrix along the same diagonal
            while (row < n && col < m) {
                matrix[row][col] = diagonal.get(idx++);
                row++;
                col++;
            }

            // Clear the list for the next diagonal.
            diagonal.clear();
        }

        // Process upper-right diagonals (starting at column 1 in the first row, excluding the major diagonal)
        for (int j = 1; j < m; j++) {
            int row = 0, col = j;

            // Collect all the elements in the current diagonal.
            while (row < n && col < m) {
                diagonal.add(matrix[row][col]);
                row++;
                col++;
            }

            // Sort the collected diagonal elements in descending order.
            diagonal.sort(Collections.reverseOrder());

            // Reset row and col to starting position for this diagonal.
            row = 0;
            col = j;
            int idx = 0; // Index for placing the sorted elements back.
            // Reinsert the sorted elements back into the matrix along the same diagonal
            while (row < n && col < m) {
                matrix[row][col] = diagonal.get(idx++);
                row++;
                col++;
            }

            // Clear the list for the next diagonal.
            diagonal.clear();
        }
    }
}
