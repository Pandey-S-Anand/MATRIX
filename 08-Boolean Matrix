//Brutefoce approach

class Solution {
    void booleanMatrix(int mat[][]) {
        // Arrays to keep track of which rows and columns contain at least one '1'
        boolean[] rowFlags = new boolean[mat.length];
        boolean[] colFlags = new boolean[mat[0].length];

        // First pass: Traverse the matrix and mark the rows and columns that need to be updated
        for (int row = 0; row < mat.length; row++) {
            for (int col = 0; col < mat[0].length; col++) {
                // If a cell contains 1, mark its row and column
                if (mat[row][col] == 1) {
                    rowFlags[row] = true;  // Mark the current row
                    colFlags[col] = true;  // Mark the current column
                }
            }
        }

        // Second pass: Traverse the matrix again and update the cells : If a row or column is marked, set the cell to 1
        for (int row = 0; row < mat.length; row++) {
            for (int col = 0; col < mat[0].length; col++) {
                if (rowFlags[row] || colFlags[col]) {
                    mat[row][col] = 1;
                }
            }
        }
    }
}


//Optimal approach

class Solution {
    void booleanMatrix(int[][] mat) {
        boolean firstRowHasOne = false;
        boolean firstColHasOne = false;

        // Step 1: Check if first row has any 1
        for (int j = 0; j < mat[0].length; j++) {
            if (mat[0][j] == 1) {
                firstRowHasOne = true;
                break;
            }
        }

        // Step 2: Check if first column has any 1
        for (int i = 0; i < mat.length; i++) {
            if (mat[i][0] == 1) {
                firstColHasOne = true;
                break;
            }
        }

        /* 
         Step 3: 
         Use the first row of the matrix to mark which columns should be set to 1
         Use the first column of the matrix to mark which rows should be set to 1
        */
        for (int row = 1; row < mat.length; row++) {
            for (int col = 1; col < mat[0].length; col++) {
                if (mat[row][col] == 1) {
                    mat[row][0] = 1; // Mark row
                    mat[0][col] = 1; // Mark column
                }
            }
        }

        // Step 4: Update the matrix based on the markers
        for (int row = 1; row < mat.length; row++) {
            for (int col = 1; col < mat[0].length; col++) {
                if (mat[row][0] == 1 || mat[0][col] == 1) {
                    mat[row][col] = 1;
                }
            }
        }

        // Step 5: Update first row if needed
        if (firstRowHasOne) {
            for (int col = 0; col < mat[0].length; col++) {
                mat[0][col] = 1;
            }
        }

        // Step 6: Update first column if needed
        if (firstColHasOne) {
            for (int row = 0; row < mat.length; row++) {
                mat[row][0] = 1;
            }
        }
    }
}
