class Solution {
    public List<Integer> spiralOrder(int[][] mat) {
      int row=mat.length,col=mat[0].length,top=0,bottom=row-1,left=0,right=col-1,direction=1;
      List<Integer>res=new ArrayList<>();

      while(top<=bottom && left<=right)
      {
        if(direction==1)
        {
         for(int i=left;i<=right;i++)
           res.add(mat[top][i]);
         
         top++;
        } 
        else if(direction==2)
        {
          for(int i=top;i<=bottom;i++)
            res.add(mat[i][right]);
          
          right--;
        }
        else if(direction==3)
        {
          for(int i=right;i>=left;i--)
            res.add(mat[bottom][i]);

          bottom--;
        }
        else
        {
          for(int i=bottom;i>=top;i--)
            res.add(mat[i][left]);
          
          left++;
        }

        if(direction==1)
          direction=2;
        else if(direction==2)
          direction=3;
        else if(direction==3)
         direction=4;
        else if(direction==4)
         direction=1;
      }

      return res;
    }
}


//Aliter

class Solution {
    public List<Integer> spiralOrder(int[][] mat) {
      int row=mat.length,col=mat[0].length,top=0,bottom=row-1,left=0,right=col-1,direction=1;
      List<Integer>res=new ArrayList<>();

      while(top<=bottom && left<=right)
      {
        if(direction==1)
        {
         for(int i=left;i<=right;i++)
           res.add(mat[top][i]);
         
         top++;
        } 
        else if(direction==2)
        {
          for(int i=top;i<=bottom;i++)
            res.add(mat[i][right]);
          
          right--;
        }
        else if(direction==3)
        {
          for(int i=right;i>=left;i--)
            res.add(mat[bottom][i]);

          bottom--;
        }
        else
        {
          for(int i=bottom;i>=top;i--)
            res.add(mat[i][left]);
          
          left++;
        }

        direction=direction%4+1;
      }

      return res;
    }
}
