//Brutefoce approach

class Solution {
    public int countServers(int[][] grid) {
        int communicatingServerCount = 0;

        for (int row = 0; row < grid.length; row++) {
            for (int col = 0; col < grid[0].length; col++) {
                // Process only server cells (value == 1) and verify if the server at (row, col) can communicate with another server in its row or column
                if (grid[row][col] == 1 && canServerCommunicate(grid, row, col)) {
                    communicatingServerCount++;
                }
            }
        }

        return communicatingServerCount;
    }

    private boolean canServerCommunicate(int[][] grid, int row, int col) {
        int totalRows = grid.length;
        int totalCols = grid[0].length;

        // Check the same row (excluding current column)
        for (int otherCol = 0; otherCol < totalCols; otherCol++) {
            if (otherCol != col && grid[row][otherCol] == 1) {
                return true; // Found another server in the same row
            }
        }

        // Check the same column (excluding current row)
        for (int otherRow = 0; otherRow < totalRows; otherRow++) {
            if (otherRow != row && grid[otherRow][col] == 1) {
                return true; // Found another server in the same column
            }
        }

        // No server found in the same row or column
        return false;
    }
}


//Optimal approach

public class Solution {
    public int countServers(int[][] grid) {
        // Count number of servers in each row and column
        int[] rowCount = new int[grid.length];
        int[] colCount = new int[grid[0].length];

        // First pass: Count how many servers are in each row and column
        for (int row = 0; row < grid.length; row++) {
            for (int col = 0; col < grid[0].length; col++) {
                if (grid[row][col] == 1) {
                    rowCount[row]++;
                    colCount[col]++;
                }
            }
        }

        int communicatingServerCount = 0;

        // Second pass: Identify servers that can communicate
        for (int row = 0; row < grid.length; row++) {
            for (int col = 0; col < grid[0].length; col++) {
                if (grid[row][col] == 1) {
                    // A server can communicate if there's more than 1 server in its row or column
                    if (rowCount[row] > 1 || colCount[col] > 1) {
                        communicatingServerCount++;
                    }
                }
            }
        }

        return communicatingServerCount;
    }
}
